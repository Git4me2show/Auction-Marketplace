<%@ page language="java" contentType="text/html; charset=UTF-8" %>
<%@ page import="java.sql.*, java.util.Date" %>
<%@ page import="javax.servlet.http.*, javax.servlet.*" %>
<%@ page import="com.cs336.pkg.*" %>

<%
    int itemID = (int)session.getAttribute("itemID");
    float increment = Float.parseFloat(request.getParameter("increment"));
    float limit = Float.parseFloat(request.getParameter("limit"));
    String userEmail = (String)session.getAttribute("username"); // Assume this is fetched from session or input
    Timestamp currentTime = new Timestamp(new Date().getTime());
    Timestamp closeDateTime = null;
    float minAskingPrice = 0;
    Connection con = null;
    PreparedStatement ps = null;
    ResultSet rs = null;
    try {
        ApplicationDB db = new ApplicationDB();
        con = db.getConnection();

		String createAutoBid = "insert into auto_bid values(null, ?, ?, ?)";
		ps = con.prepareStatement(createAutoBid, Statement.RETURN_GENERATED_KEYS);
		ps.setFloat(1, increment);
		ps.setFloat(2,limit);
		ps.setInt(3,itemID);
		ps.executeUpdate();
		int autoGeneratedID = 0;
		ResultSet getKey = ps.getGeneratedKeys();
		if(getKey.next()) {
			autoGeneratedID = getKey.getInt(1);
		}
		String createPlace = "insert into place values (?,?,?)";
		PreparedStatement psp = con.prepareStatement(createPlace);
		psp.setString(1, userEmail);
		psp.setInt(2, autoGeneratedID);
		psp.setTimestamp(3, currentTime);
		psp.executeUpdate();
		
        // Get the current highest bid for the item
        String query = "SELECT Current_Highest_Bid, close_date_time, initial_price FROM Listed_Item WHERE List_ID = ?";
        ps = con.prepareStatement(query);
        ps.setInt(1, itemID);
        rs = ps.executeQuery();

        float currentHighestBid = 0;
        if (rs.next()) {
            currentHighestBid = rs.getFloat("Current_Highest_Bid");
            closeDateTime = rs.getTimestamp("close_date_time");
            minAskingPrice = rs.getFloat("initial_price");
        }
		float bidAmount = currentHighestBid + increment;
       
		if (bidAmount <= limit && currentTime.before(closeDateTime)) {
        	String winner = userEmail;
        	//check for auto bids, update if necessary
        	String autoBidQuery = "select * from place join auto_bid using (auto_bid_id) where ItemID = ?";
        	ps = con.prepareStatement(autoBidQuery);
        	ps.setInt(1, itemID);
        	rs = ps.executeQuery();
        	
        	while  (rs.next()) {
        		float autoBidIncrement = rs.getFloat("Bid_Increment");
        		out.println(autoBidIncrement);
        		float cap = rs.getFloat("highest_bid");
    			float bidSum = autoBidIncrement + bidAmount;
        		if(bidSum <= cap) {
	        		 winner = rs.getString("userEmail");
	        		 if (bidSum <= minAskingPrice) {
	        			 bidAmount = minAskingPrice + autoBidIncrement;
	        		 }
	        		 
	        		 else  {
	        			 bidAmount += autoBidIncrement;
	        		 }
        		 
        		}
        		
        		String bid = "insert into bid values(null, ?, ?, ?, ?, null)";
        		ps = con.prepareStatement(bid);
        		ps.setFloat(1, bidAmount);
        		ps.setTimestamp(2, currentTime);
        		ps.setInt(3,itemID);
        		ps.setString(4,userEmail);
        		
        	}
            // Update the item's current highest bid
            String updateQuery = "UPDATE Listed_Item SET Current_Highest_Bid = ? WHERE List_ID = ?";
            ps = con.prepareStatement(updateQuery);
            ps.setFloat(1, bidAmount);
            ps.setInt(2, itemID);
            ps.executeUpdate();

         
           String winnerQuery = "update listed_item set winnerEmail = ? where list_id = ?";
           PreparedStatement ws = con.prepareStatement(winnerQuery);
           ws.setString(1, winner);
           ws.setInt(2,itemID);
           ws.executeUpdate();    
        } else {
            // Handle the case where bid is not higher than current highest bid
            // Maybe redirect back with an error message
        }

    } catch (Exception e) {
        if (con != null) {
            try {
                con.rollback();
            } catch (SQLException ex) {
                ex.printStackTrace();
            }
        }
        e.printStackTrace();
        // Redirect or display error message
    } finally {
        if (rs != null) try { rs.close(); } catch (SQLException e) { e.printStackTrace(); }
        if (ps != null) try { ps.close(); } catch (SQLException e) { e.printStackTrace(); }
        if (con != null) try { con.close(); } catch (SQLException e) { e.printStackTrace(); }
    }

    // Redirect back to the home page
    response.sendRedirect("home.jsp");
%>